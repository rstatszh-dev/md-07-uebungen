---
title: "Daten zusammenfügen"
format:
  html:
    embed-resources: true
    toc: true
execute:
  warning: false
editor_options: 
  chunk_output_type: console
editor: visual
---

## R-Pakete laden

```{r}
library(tidyverse) # Läd die wichtigsten Packages des Tidyverse gemeinsam
library(knitr)     # Package wird für Funktion kable() geladen
library(DT)        # Package wird für Funktion datatable() geladen
library(gt)        # Package wird für Funktion gt() geladen
```

## Daten importieren

1.  **Einkäufe**: Eine Reihe pro Kunde und Produkt. Listet die Einkäufe eines der Kunden.
2.  **Preise**: Eine Reihe pro Produkt im Supermarkt. Listet die Preise der Produkte.
3.  **Kundenprofil**: Eine Reihe pro Kunde im Bonusprogramm. Listet die Merkmale der Kunden.

```{r}
einkaeufe <- read_csv(file = "daten/supermarkt/einkaeufe.csv")
preise <- read_csv(file = "daten/supermarkt/preise.csv")
kundenprofile <- read_csv(file = "daten/supermarkt/kundenprofile.csv")
```

## Daten erkunden

1.  Nutze die Funktion `names()` für jeden Dataframe um die Spaltennamen zu erkunden. Über welche Variablen können die Daten zusammengefügt werden?

2.  Nutze die Funktion `nrow()` für jeden Dataframe um die Anzahl Reihen zu identifizieren.

3.  Nutze andere Funktionen die dir bekannt sind um die drei Dataframes zu erkunden.

```{r}

```

## Daten transformation - Daten zusammenfügen

1.  Nutze die drei Dataframes und erstelle drei verschiedene Kombinationen von joins (Zusammenfügungen).

2.  Schaut euch den Output in der Console jeweils genau an und überlegt welche joins (Zusammenfügungen) für welche Fragestellungen sinnvoll wären.

Als Erinnerung, die drei Funktionen, die du kennengelernt hast:

-   `left_join()`
-   `right_join()`
-   `full_join()`

3.  Fahre mit der nächsten Aufgabe fort.

```{r}

```

## Daten transformation - Daten zusammenfügen: `einkaeufe_preise`

1.  Starte mit dem Objekt `einkauefe` und nutze die Funktion `left_join()` um dieses mit dem Objekt `preise` zusammenzufügen. Speicher das Ergebnis als ein neues Objekt in deiner Arbeitsumgebung (Environment) mit dem Namen `einkaeufe_preise`.

2.  Schaue dir das Ergebnis in `einkaeufe_preise` an und überlege, ob die Zusammenführung erfolgreich war.

```{r}

```

## Daten transformieren - Neue Variable erstellen

1.  Starte mit dem Daten-Objekt `einkauefe_preise` und nutze die Funktion `mutate()` um eine neue Variable mit dem Namen `kosten` zu erstellen. Die Variable soll eine Multiplikation der Spalte `einkauf` mit der Spalte `preis` beinhalten. Speicher das Ergebnis als ein neues Daten-Objekt mit dem Namen `einkaeufe_kosten`.

2.  Schaue dir das Ergebnis in `einkaeufe_kosten` an und überlege, ob die Berechnung erfolgreich war.

```{r}

```

## Daten transformieren - Zusammenfassen (Bonus)

1.  Starte mit dem Daten-Objekt `einkaeufe_kosten` und gruppiere die Daten nach `kunden_id`. Berechne dann die Summe aus den Kosten um den geschuldeten Betrag der Kund:innen zu berechnen. Nenne die Spalte `summe`. Speicher das Ergebnis in deiner Arbeitsumgebung mit dem Namen `einkaeufe_kosten_sum`.

2.  Schaue dir das Ergebnis in `einkaeufe_kosten_sum` an und überlege ob die Zusammenfassung erfolgreich war.

```{r}

```

## Daten transformation - Daten zusammenfügen: `kunden_tab`

1.  Starte mit dem Daten-Objekt `einkaeufe_kosten_sum` und nutze die Funktion `left_join()` um dieses mit dem Daten-Objekt `kundenprofile` zusammenzufügen.

2.  Wähle dann nur die Spalten `vorname`, `nachname`, `summe` und `email` mit der Funktion `select()` aus.

3.  Schaue dir das Ergebnis in `einkaeufe_preise` an und überlege, ob die Zusammenführung erfolgreich war.

```{r}

```

## Daten darstellen - Daten als Tabelle darstellen (Bonus)

1.  Nutze das Daten-Objekt `kunden_tab` und den Pipe-Operator um eine Code-Sequenz zu schreiben welche das Objekt `kunden_tab` mit der Funktion `gt()` verbindet.

```{r}

```

2.  Nutze das Daten-Objekt `kunden_tab` und den Pipe-Operator um eine Code-Sequenz zu schreiben welche das Daten-Objekt `kunden_tab` mit der Funktion `datatable()` verbindet.

```{r}

```

3.  Nutze das Objekt `kunden_tab` und den Pipe-Operator um eine Code-Sequenz zu schreiben welche das Objekt `kunden_tab` mit der Funktion `kable()` verbindet.

```{r}

```

4.  Render das Dokument und schaue dir die Ergebnisse an.
